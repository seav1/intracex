name: Add Server Time

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

jobs:
  extend-server:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install playwright
          playwright install chromium

      - name: Extend server time
        env:
          REMEMBER_WEB_COOKIE: ${{ secrets.REMEMBER_WEB_COOKIE }}
          LOGIN_EMAIL: ${{ secrets.LOGIN_EMAIL }}
          LOGIN_PASSWORD: ${{ secrets.LOGIN_PASSWORD }}
        run: |
          python - <<'PY'
          import os
          import time
          from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError


          LOGIN_URL = "https://intracex.de/auth/login"
          SERVER_URL = "https://intracex.de/minecraft"


          def handle_consent_popup(page):
              try:
                  selector = 'button.fc-cta-consent.fc-primary-button'
                  page.wait_for_selector(selector, state='visible', timeout=5000)
                  page.click(selector)
                  time.sleep(1)
                  print("已同意 Cookie 弹窗。")
              except Exception:
                  pass


          def is_login_page(page):
              matches = 0
              for selector in (
                  'input#email[type="email"][name="email"]',
                  'input#password[type="password"][name="password"]',
                  'input.btn.btn-primary.btn-block[type="submit"][value="Anmelden"]',
              ):
                  try:
                      if page.query_selector(selector):
                          matches += 1
                  except Exception:
                      pass
              if matches >= 2:
                  print("检测到登录表单。")
                  return True
              return False


          def safe_goto(page, url, wait_until="domcontentloaded", timeout=90000):
              for attempt in range(2):
                  try:
                      print(f"访问 {url} (第 {attempt + 1} 次)")
                      page.goto(url, wait_until=wait_until, timeout=timeout)
                      handle_consent_popup(page)
                      return True
                  except PlaywrightTimeoutError:
                      if attempt == 1:
                          print("页面加载超时。")
                          return False
                      print("页面加载超时，稍后重试...")
                      time.sleep(5)
                  except Exception as e:
                      print(f"页面导航出错: {e}")
                      return False
              return False


          def parse_cookies(cookie_string):
              if not cookie_string:
                  return []
              cookies = []
              for pair in cookie_string.split('; '):
                  if '=' not in pair:
                      continue
                  name, value = pair.split('=', 1)
                  cookies.append({
                      'name': name.strip(),
                      'value': value.strip(),
                      'domain': '.intracex.de',
                      'path': '/',
                      'expires': time.time() + 3600 * 24 * 365,
                      'httpOnly': True,
                      'secure': True,
                      'sameSite': 'Lax',
                  })
              return cookies


          def get_cookies_string(context):
              return '; '.join(
                  f"{cookie['name']}={cookie['value']}"
                  for cookie in context.cookies()
                  if cookie.get('domain') and 'intracex.de' in cookie['domain']
              )


          def save_new_cookie(context):
              try:
                  new_cookie = get_cookies_string(context)
                  if new_cookie:
                      with open('new_cookie.txt', 'w') as fh:
                          fh.write(new_cookie)
                      print(f"已保存新 cookie ({len(new_cookie)} 字符)。")
              except Exception as exc:
                  print(f"保存 cookie 失败: {exc}")


          def add_server_time():
              remember_cookie = os.environ.get('REMEMBER_WEB_COOKIE')
              login_email = os.environ.get('LOGIN_EMAIL')
              login_password = os.environ.get('LOGIN_PASSWORD')

              if not (remember_cookie or (login_email and login_password)):
                  print("错误: 未提供 REMEMBER_WEB_COOKIE 或邮箱密码。")
                  return False

              with sync_playwright() as playwright:
                  browser = playwright.chromium.launch(
                      headless=True,
                      args=['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],
                  )
                  context = browser.new_context(
                      viewport={'width': 1920, 'height': 1080},
                      user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                  )
                  page = context.new_page()
                  page.set_default_timeout(60000)

                  try:
                      used_cookie = False
                      cookie_failed = False

                      if remember_cookie:
                          print("尝试使用 REMEMBER_WEB_COOKIE...")
                          cookies = parse_cookies(remember_cookie)
                          if cookies:
                              context.add_cookies(cookies)
                              if safe_goto(page, SERVER_URL):
                                  time.sleep(3)
                                  if any(key in page.url for key in ("login", "auth")) or is_login_page(page):
                                      print("Cookie 已失效。")
                                      page.screenshot(path="cookie_invalid_login_page.png")
                                      cookie_failed = True
                                  else:
                                      print("Cookie 登录成功。")
                                      used_cookie = True
                              else:
                                  print("Cookie 导航失败。")
                                  page.screenshot(path="cookie_login_fail_navigation.png")
                                  cookie_failed = True
                          else:
                              print("Cookie 解析失败。")
                              cookie_failed = True

                          if cookie_failed:
                              context.clear_cookies()

                      if not used_cookie:
                          if not (login_email and login_password):
                              print("错误: Cookie 失效但未提供邮箱密码。")
                              return False

                          if not safe_goto(page, LOGIN_URL):
                              print("访问登录页失败。")
                              page.screenshot(path="login_page_load_fail.png")
                              return False

                          print("使用邮箱密码登录...")
                          page.fill('input[name="email"]', login_email)
                          page.fill('input[name="password"]', login_password)
                          page.click('input[type="submit"][value="Anmelden"]')

                          try:
                              page.wait_for_load_state("domcontentloaded", timeout=60000)
                              time.sleep(3)
                              if any(key in page.url for key in ("login", "auth")):
                                  print("邮箱密码登录失败。")
                                  page.screenshot(path="login_fail.png")
                                  return False
                              print("邮箱密码登录成功。")
                              save_new_cookie(context)
                              if page.url != SERVER_URL and not safe_goto(page, SERVER_URL):
                                  print("导航到服务器页面失败。")
                                  return False
                          except Exception as exc:
                              print(f"登录后处理失败: {exc}")
                              page.screenshot(path="post_login_error.png")
                              return False

                      print(f"当前页面 URL: {page.url}")
                      time.sleep(3)
                      page.screenshot(path="step1_page_loaded.png")

                      button_selector = 'button:has-text("Verlängern"), a:has-text("Verlängern"), [role="button"]:has-text("Verlängern")'
                      print("查找 'Verlängern' 按钮...")
                      page.wait_for_selector(button_selector, timeout=30000)
                      button = page.query_selector(button_selector)
                      if not button:
                          print("未找到按钮。")
                          page.screenshot(path="extend_button_not_found.png")
                          return False

                      button_class = button.get_attribute("class") or ""
                      print(f"按钮 class: {button_class}")
                      if "disabled" in button_class:
                          print("按钮已禁用，无需续期。")
                          return True

                      button.click()
                      print("已点击 'Verlängern' 按钮。")
                      time.sleep(5)
                      page.screenshot(path="extend_success.png")
                      return True

                  except Exception as exc:
                      print(f"执行失败: {exc}")
                      try:
                          page.screenshot(path="general_error.png")
                      except Exception:
                          pass
                      return False
                  finally:
                      browser.close()


          if __name__ == "__main__":
              print("开始执行添加服务器时间任务...")
              if add_server_time():
                  print("任务执行成功。")
                  raise SystemExit(0)
              print("任务执行失败。")
              raise SystemExit(1)
          PY

      - name: Commit updated cookie
        if: success()
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          if [ -z "${GH_PAT}" ]; then
            echo "缺少 GH_PAT，跳过 cookie 更新提交。"
            exit 0
          fi

          if [ ! -f new_cookie.txt ]; then
            echo "未生成新的 cookie 文件，跳过提交。"
            exit 0
          fi

          git status --short new_cookie.txt
          if git diff --quiet -- new_cookie.txt 2>/dev/null; then
            echo "cookie 内容未变化，跳过提交。"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add new_cookie.txt
          git commit -m "chore: update remember cookie"
          git push "https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}" HEAD:${{ github.ref }}

